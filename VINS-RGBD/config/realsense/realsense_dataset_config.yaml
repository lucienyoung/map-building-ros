%YAML:1.0

#common parameters
imu_topic: "/d400/imu0"
image_topic: "/d400/color/image_raw"

depth_topic: "/d400/aligned_depth_to_color/image_raw"
output_path: "/home/lucien_young/output/"

#pointcloud settings
pcl_dist: 15
u_boundary: 10
d_boundary: 10
l_boundary: 40
r_boundary: 40
pcl_min_dist: 0.8
pcl_max_dist: 5
resolution: 0.1

#camera calibration
model_type: PINHOLE
camera_name: camera
image_width: 848
image_height: 480
  #TODO modify distortion

distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
   fx: 611.4509887695312
   fy: 611.4857177734375
   cx: 433.2039794921875
   cy: 249.4730224609375

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 9.9983849663352242e-01, -2.5045241365319647e-03,
       -1.7796291986456828e-02, 2.5632326637990638e-03,
       9.9999134592561145e-01, 3.2768753707455149e-03,
       1.7787930962563699e-02, -3.3219621812558037e-03,
       9.9983626363487010e-01 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -2.2185314369660380e-02, -2.4258476501238253e-02,
       3.7067411755124978e-02 ]

#feature traker paprameters
max_cnt: 200           # max feature number in feature tracking
min_dist: 20            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, turn on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheeld
acc_n: 0.05 #1.2432684348713278e-02    # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01 #1.7484206008910417e-03  # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0003 #3.3735545906627031e-04  # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-5 #1.9011648355389841e-05 # gyroscope bias random work noise standard deviation.     #4.0e-5

#for tracked applications
#acc_n: 0.5          # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5


g_norm: 9.805       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/lucien_young/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 1                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1                   # save image in pose graph for visualization purpose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
